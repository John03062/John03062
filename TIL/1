#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
 
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
ㅍ

}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}

    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

// 최대공약수(GCD) 계산 함수
int gcd(int a, int b) {
    while (b != 0) {
        int temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

// 최소공배수(LCM) 계산 함수
int lcm(int a, int b) {
    return a * b / gcd(a, b);
}

// n개의 수에 대한 최대공약수 계산 함수
int gcd_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = gcd(result, arr[i]);
    }
    return result;
}

// n개의 수에 대한 최소공배수 계산 함수
int lcm_of_array(int arr[], int n) {
    int result = arr[0];
    for (int i = 1; i < n; i++) {
        result = lcm(result, arr[i]);
    }
    return result;
}

// 두 수의 차이 계산
int difference(int a, int b) {
    return abs(a - b);
}

// 두 수의 합 계산
int sum(int a, int b) {
    return a + b;
}

// 두 수의 곱 계산
int product(int a, int b) {
    return a * b;
}

// 두 수의 나누기 계산
int divide(int a, int b) {
    if (b != 0) {
        return a / b;
    } else {
        printf("Error: Division by zero!\n");
        return -1;  // 나누기 0 에러 처리
    }
}

// 수의 배열을 받아서 그 배열의 최대값을 반환
int max_in_array(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// 수의 배열을 받아서 그 배열의 최소값을 반환
int min_in_array(int arr[], int n) {
    int min = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// 배열의 평균 구하기
float average(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (float)sum / n;
}

// 배열의 합 구하기
int array_sum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// 배열을 받아서 각 요소를 출력하는 함수
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// 배열을 받아서 각 요소를 정렬하는 함수
void sort_array(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

// 숫자가 소수인지 판별하는 함수
int is_prime(int num) {
    if (num <= 1) {
        return 0; // 1 이하의 수는 소수가 아니다
    }
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0; // 나누어지면 소수가 아니다
        }
    }
    return 1; // 소수
}

// 배열에 소수인 수가 있는지 확인하는 함수
int contains_prime(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        if (is_prime(arr[i])) {
            return 1; // 소수 발견
        }
    }
    return 0; // 소수 없음
}

// 모든 소수 출력
void print_primes_up_to(int n) {
    for (int i = 2; i <= n; i++) {
        if (is_prime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

// 두 수가 서로소인지 판별하는 함수 (GCD가 1이면 서로소)
int are_coprime(int a, int b) {
    return gcd(a, b) == 1;
}

// 피보나치 수열 구하는 함수 (n번째까지)
void fibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        printf("%d ", a);
        int next = a + b;
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int a, b, n;

    // 두 수 입력받기
    printf("두 수를 입력하세요: ");
    scanf("%d %d", &a, &b);

    // 최대공약수와 최소공배수 출력
    printf("최대공약수: %d\n", gcd(a, b));
    printf("최소공배수: %d\n", lcm(a, b));

    // 두 수의 차이
    printf("두 수의 차이: %d\n", difference(a, b));

    // 두 수의 합
    printf("두 수의 합: %d\n", sum(a, b));

    // 두 수의 곱
    printf("두 수의 곱: %d\n", product(a, b));

    // 두 수의 나누기
    printf("두 수의 나누기: %d\n", divide(a, b));

    // 두 수가 서로소인지 확인
    printf("두 수가 서로소인가? %s\n", are_coprime(a, b) ? "예" : "아니요");

    // 배열을 입력받고 관련 기능들 수행
    printf("배열의 크기를 입력하세요: ");
    scanf("%d", &n);
    int arr[n];
    printf("배열의 요소들을 입력하세요: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("배열의 합: %d\n", array_sum(arr, n));
    printf("배열의 평균: %.2f\n", average(arr, n));
    printf("배열의 최대값: %d\n", max_in_array(arr, n));
    printf("배열의 최소값: %d\n", min_in_array(arr, n));

    // 배열 정렬 후 출력
    sort_array(arr, n);
    printf("정렬된 배열: ");
    print_array(arr, n);

    // 소수 확인
    printf("배열에 소수가 포함되어 있나요? %s\n", contains_prime(arr, n) ? "예" : "아니요");

    // 피보나치 수열 출력
    printf("몇 번째 피보나치 수까지 구할까요? ");
    scanf("%d", &n);
    fibonacci(n);

    // 1부터 n까지의 소수 출력
    printf("1부터 %d까지의 소수: ", n);
    print_primes_up_to(n);

    return 0;
}

